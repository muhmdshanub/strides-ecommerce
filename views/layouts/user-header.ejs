<!DOCTYPE html>
<html lang="en">
  <head>
    <title>Shoppers &mdash; Colorlib e-Commerce Template</title>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">

    <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Mukta:300,400,700"> 
    <link rel="stylesheet" href="/styles/fonts/icomoon/style.css">
    <link rel="stylesheet" href="/styles/bootstrap.min.css">
    <link rel="stylesheet" href="/styles/magnific-popup.css">
    <link rel="stylesheet" href="/styles/jquery-ui.css">
    <link rel="stylesheet" href="/styles/owl.carousel.min.css">
    <link rel="stylesheet" href="/styles/owl.theme.default.min.css">
    <link rel="stylesheet" href="/styles/aos.css">
    <link rel="stylesheet" href="/styles/style.css">
    <!-- Bootstrap Table CSS -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-table@1.18.2/dist/bootstrap-table.min.css">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.19.0/font/bootstrap-icons.css" rel="stylesheet">
    <script src="/node_modules/socket.io/client-dist/socket.io.js"></script>
    
  </head>
  <body>

    <input type="hidden" id="currentlyLoggedInUserId" value="">


    <script>
      document.addEventListener('DOMContentLoaded', async function () {
          try {
              const response = await fetch('/get-current-user-id'); // Replace with the actual route in your server
              const data = await response.json();
  
              if (response.ok) {
                  const currentlyLoggedInUserIdInput = document.getElementById('currentlyLoggedInUserId');
                  currentlyLoggedInUserIdInput.value = data.userId;
                  console.log('Successfully fetched currently logged-in user ID:', data.userId);
              } else {
                  console.error('Error fetching currently logged-in user ID:', data.message || 'Unknown error');
              }
          } catch (error) {
              console.error('Error fetching currently logged-in user ID:', error.message || 'Unknown error');
          }
      });


      // Establish a Socket.IO connection
      const socket = io();

      if(socket){
        console.log("socket is present")
      }
  
     

      // Handle the 'force-logout' event for single user block
      socket.on('force-logout', ({ userId }) => {
        
        const currentlyLoggedInUserId = document.getElementById('currentlyLoggedInUserId').value;
        
          // Check if the forced logout is for the currently logged-in user
          if (userId === currentlyLoggedInUserId) {
            
              // Log out the user on the client side
              window.location.href = '/logout'; // Redirect to the logout route or perform the logout action
          }
      });
  
      // Handle the 'force-logout-multiple' event for multiple user block
      socket.on('force-logout-multiple', ({ userIds }) => {
          // Check if the forced logout includes the currently logged-in user(s)
          if (userIds.includes(currentlyLoggedInUserId)) {
              // Log out the user on the client side
              window.location.href = '/logout'; // Redirect to the logout route or perform the logout action
          }
      });
  </script>
  

    <script>

      
      
  
      
  </script>